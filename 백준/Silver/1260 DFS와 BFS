from collections import deque

def dfs(graph, start):
  visited=[]
  stack=[start]
  while stack:
    node=stack.pop()
    if node not in visited:
      visited.append(node)
      stack.extend(sorted(graph[node]-set(visited),reverse=True))
  return visited

def bfs(graph,start):
  visited=[]
  queue=deque(start)]
  while queue:
    node=queue.popleft()
    if node not in visited:
      visited.append(node)
      queue.extend(sorted(graph[node]-set(visited)))
  return visited

n,m,v=map(int,input().split())
graph={}
for i in range(1,n+1):
  graph[i]=set()

for i in range(m):
  a,b=map(int,input().split())
  graph[a].add(b)
  graph[b].add(a)

print(*dfs(graph, v))
print(*bfs(graph,v))
  
